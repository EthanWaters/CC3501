

static void udp_client_task(void *pvParameters)
{
    
    int addr_family = 0;
    int ip_protocol = 0;
    printf("Free heap size: %lu", esp_get_free_heap_size());
    
    struct sockaddr_in dest_addr;
    dest_addr.sin_addr.s_addr = inet_addr(HOST_IP_ADDR);
    dest_addr.sin_family = AF_INET;
    dest_addr.sin_port = htons(PORT);
    addr_family = AF_INET;
    ip_protocol = IPPROTO_IP;

    int sock = socket(addr_family, SOCK_DGRAM, ip_protocol);
    printf("Socket:%i\n", sock);
    if (sock < 0) {
        printf("Error");
    }

    // Set timeout
    struct timeval timeout;
    timeout.tv_sec = 10;
    timeout.tv_usec = 0;
    setsockopt (sock, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof timeout);

    printf("Socket created, sending to %s:%d\n", HOST_IP_ADDR, PORT);
    
    twai_message_t rx_msg;
    twai_message_t tx_msg;

    
         
            tx_msg.identifier = REQUEST_SLAVE1;
            tx_msg.data_length_code = 4;
            tx_msg.data[0] = 'H';
            tx_msg.data[1] = 'E';
            tx_msg.data[2] = 'L';
            tx_msg.data[3] = 'L';

    while (1) {
        
        uint32_t data_msgs_rec = 0;
        while (data_msgs_rec < NO_OF_DATA_MSGS) {
            

            //Queue message for transmission
            if (twai_transmit(&tx_msg, pdMS_TO_TICKS(100)) == ESP_OK) {
                printf("Message queued for transmission\n");
            } else {
                printf("Failed to queue message for transmission\n");
            }
            if (twai_receive(&rx_msg, pdMS_TO_TICKS(100)) == ESP_OK) {
                if (rx_msg.identifier == REQUEST_SLAVE1) {

                    uint8_t* rec_data[3];
                    for (int i = 0; i < rx_msg.data_length_code; i++) {
                        rec_data[i] = rx_msg.data[i];
                        printf("%02X", rx_msg.data[i]);
                    }
                    printf("\n");
                    for (int i = 0; i < rx_msg.data_length_code; i++) {
                        printf("%c", rx_msg.data[i]);
                    }
                    printf("\n");
                }
            }
        }
            printf("DId I make it here ??? \n");
            

            int err = sendto(sock, payload, strlen(payload), 0, (struct sockaddr *)&dest_addr, sizeof(dest_addr));
            if (err < 0) {
                printf("Error occurred during sending err:%i\n", err);
                break;
            }
            printf("Message sent\n");

            vTaskDelay(2000 / portTICK_PERIOD_MS);
    }

    if (sock != -1) {
        printf("Shutting down socket and restarting...\n");
        shutdown(sock, 0);
        close(sock);
    }

}